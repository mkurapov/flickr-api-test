//index.js
var https = require('https');
var cheerio = require('cheerio');

/**
 * Module for getting stockphotos from stocksnap.io
 * @module stocksnap.io
 * @author Bram van der Veen <96aa48@gmail.com>
 */

module.exports = get;

/**
 * Function for getting images from stocksnap.io
 * @param {string} query - the search query for the image request.
 * @param {Object} options - options object
 * @param {string} options.sort - Sort method of images by : page, relevance, date, tredning, views, downloads and favotires.
 * @param {int} options.pages - Amount of pages you want to crawl.
 * @param {bool} options.shuffle - If true will shuffle the final array of images that are returned
 * @param {bool} options.highres - If true the image links will reference downloadable high res images instead of thumbnails
 * @param {bool} - options.one - If true will only return one image instead of an array.
 * @param {function} fn - Callback that gives an array with photos as a variable
 */

function get(query, options, fn) {
  if (!fn) throw 'You didn\'t specify a callback function.';
  if (!options) options = {};

  if (query) var link = 'https://stocksnap.io/search/' + query + '/sort/' + (options.sort || 'relevance') + '/desc';
  else var link = 'https://stocksnap.io/view-photos/sort/' + (options.sort || 'trending') + '/desc';

  ripPhotos(link, options, function (arr) {
    if (options.shuffle) arr = shuffle(arr);
    if (!options.one) fn(arr);
    else fn(arr[0]);
  });
}

/**
 * Function for ripping photos from the provided links (only accessible by the module)
 * @param {string} link - Link to a stocksnap page
 * @param {Object} options - Options object (same as get() options object)
 * @param {function} fn - Callback function
 */

function ripPhotos(link, options, fn) {
  var arr = [];
  var done = 0;

  for (var i = 1; i < (options.pages || 1) + 1; i++) {
    (function (i) {
      https.get(link + (i > 1 ? ('/page-' + i) : ''), function (res) {
        if (res.statusCode != 200) console.error('Stocksnap.io error: Something went wrong requesting the pictures. Response was met with code ' + res.statusCode + ' on page ' + link, + ' number ' + i);
        var _data = '';

        res.on('data', function (data) {
          _data += data;
        });

        res.on('end', function () {
          var $ = cheerio.load(_data);
          var img = $('img');

          for (var x = 0; x < img.length; x++) {
              var id = $(img[x]).attr('src').split('/')[$(img[x]).attr('src').split('/').length - 1];

              if (!id.match(/snappa/g)) {
                if (options.highres) arr.push('https://stocksnap.io/download-photo/' + id);
                else arr.push($(img[x]).attr('src').replace(/280h/g, '960w'));
              }
          }
          if (++done == (options.pages || 1)) fn(arr);
        });
      });
    })(i);
  }
}

/**
 * Function for shuffeling a supplied array
 * @param {Object[]} o - Array that needs to be shuffled
 * @returns {Object[]} o - Shuffled array
 */
function shuffle(o) {
  for(var j, x, i = o.length; i; j = Math.floor(Math.random() * i), x = o[--i], o[i] = o[j], o[j] = x);
  return o;
}
